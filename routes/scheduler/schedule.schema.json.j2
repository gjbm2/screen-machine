{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Schedule Configuration",
  "description": "Configure automated triggers and instruction blocks for this schedule.",
  "type": "object",
  "properties": {
    "initial_actions": {
      "$ref": "#/definitions/instruction_array",
      "title": "Initial actions",
      "description": "Steps to execute when the schedule starts."
    },
    "triggers": {
      "type": "array",
      "title": "Triggers",
      "description": "Condition blocks that fire their nested schedules or instructions.",
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/day_of_week_trigger"
          },
          {
            "$ref": "#/definitions/date_trigger"
          },
          {
            "$ref": "#/definitions/event_trigger"
          }
        ]
      }
    },
    "final_actions": {
      "$ref": "#/definitions/instruction_array",
      "title": "Final actions",
      "description": "Steps to execute after all trigger blocks have fired."
    },
    "prevent_unload": {
      "type": "boolean",
      "title": "Prevent Unload",
      "description": "If true, this schedule cannot be unloaded by the unload action or API. It can only be removed through the admin interface.",
      "default": false
    }
  },
  "definitions": {
    "dontWaitProp": {
      "type": "boolean",
      "title": "Don't wait",
      "description": "If true, proceed immediately without waiting."
    },
    "instruction_array": {
      "type": "object",
      "title": "Instruction Array",
      "description": "A list of instructions, optionally annotated as important or urgent.",
      "properties": {
        "instructions_block": {
          "title": "Instructions block",
          "type": "array",
          "items": {
            "$ref": "#/definitions/instruction"
          },
          "description": "Ordered list of instruction steps."
        },
        "important": {
          "type": "boolean",
          "description": "If true, this instruction block is important and should be queued."
        },
        "urgent": {
          "type": "boolean",
          "description": "If true, this instruction block should run immediately."
        }
      },
      "required": [
        "instructions_block"
      ],
      "additionalProperties": false
    },
    "instruction": {
      "type": "object",
      "title": "Instruction",
      "description": "A single instruction step. ALL string fields support Jinja templating with {{ variable_name }} syntax. This includes property names/values like var, duration, prompt, etc.",
      "oneOf": [
        {
          "title": "Set Variable",
          "description": "Instructs the system to assign a value to a named variable, either directly or by referencing another variable's value. The variable name can use Jinja templating. Special case: if var is null, reset all variables in the context.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "set_var",
              "default": "set_var",
              "description": "Identifies this instruction as a variable-setting operation.",
              "uniforms": {
                "hidden": true
              }
            },
            "var": {
              "type": ["string", "null"],
              "title": "Variable Name",
              "description": "The name of the variable to set. Supports Jinja templating like {{ prefix }}_varname. Use null to reset all variables in the context."
            },
            "input": {
              "type": "object",
              "title": "Value or Reference",
              "description": "Fill in either a literal value or a variable name to copy.",
              "properties": {
                "value": {
                  "oneOf": [
                    {
                      "type": "string",
                      "title": "String",
                      "description": "Supports Jinja expressions like {{ variable_name }} to reference context variables."
                    },
                    {
                      "type": "number",
                      "title": "Number"
                    },
                    {
                      "type": "boolean",
                      "title": "True / False"
                    },
                    {
                      "type": "array",
                      "title": "Array of strings",
                      "items": {
                        "type": "string",
                        "description": "Each string supports Jinja expressions like {{ variable_name }}."
                      }
                    },
                    {
                      "type": "null",
                      "title": "Null"
                    }
                  ],
                  "title": "Value",
                  "description": "The value to assign. Supports Jinja expressions like {{ variable_name }} to include context variables."
                }
              },
              "additionalProperties": false
            },
            "default": {
              "oneOf": [
                {
                  "type": "string",
                  "title": "String",
                  "description": "Supports Jinja expressions like {{ variable_name }}."
                },
                {
                  "type": "number",
                  "title": "Number"
                },
                {
                  "type": "boolean",
                  "title": "True / False"
                },
                {
                  "type": "array",
                  "title": "Array of strings",
                  "items": {
                    "type": "string",
                    "description": "Each string supports Jinja expressions like {{ variable_name }}."
                  }
                }
              ],
              "title": "Fallback Value",
              "description": "Fallback value to use if referenced variables don't exist. Supports Jinja expressions."
            }
          },
          "required": [
            "action",
            "var"
          ],
          "additionalProperties": false
        },
        {
          "title": "Device Standby",
          "description": "Put the Samsung display into standby mode.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "device_standby",
              "default": "device_standby",
              "description": "Identifies this instruction as a device standby operation.",
              "uniforms": {
                "hidden": true
              }
            }
          },
          "required": [
            "action"
          ],
          "additionalProperties": false
        },
        {
          "title": "Import Variable",
          "description": "Import a variable from another scheduler's context, a group, or global scope.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "import_var",
              "default": "import_var",
              "description": "Identifies this instruction as a variable-import operation.",
              "uniforms": {
                "hidden": true
              }
            },
            "var_name": {
              "type": "string",
              "title": "Variable Name",
              "description": "The name of the variable to import. Supports Jinja templating."
            },
            "as": {
              "type": "string",
              "title": "Import As",
              "description": "Optional: Import the variable under this name. Supports Jinja templating. If not specified, uses the same name as the source variable."
            },
            "scope": {
              "type": "string",
              "title": "Source Scope",
              "enum": [
                "global"
                {% if DEST_GROUPS %}
                {% for group in DEST_GROUPS %}
                ,"{{ group }}"
                {% endfor %}
                {% endif %}
                {% for dest in ALL_DESTINATIONS | default([]) %}
                ,"{{ dest }}"
                {% endfor %}
              ],
              "description": "The scope from which to import the variable. Can be 'global', a group name, or a specific destination ID."
            }
          },
          "required": [
            "action",
            "var_name",
            "scope"
          ],
          "additionalProperties": false
        },
        {
          "title": "Export Variable",
          "description": "Export a variable to make it available to other schedulers.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "export_var",
              "default": "export_var",
              "description": "Identifies this instruction as a variable-export operation.",
              "uniforms": {
                "hidden": true
              }
            },
            "var_name": {
              "type": "string",
              "title": "Variable Name",
              "description": "The name of the variable to export. Supports Jinja templating."
            },
            "friendly_name": {
              "type": "string",
              "title": "Friendly Name",
              "description": "A user-friendly name for this variable. Supports Jinja templating."
            },
            "scope": {
              "type": "string",
              "title": "Export Scope",
              "enum": [
                "global"
                {% if DEST_GROUPS %}
                {% for group in DEST_GROUPS %}
                ,"{{ group }}"
                {% endfor %}
                {% endif %}
              ],
              "description": "The scope to which this variable should be exported."
            }
          },
          "required": [
            "action",
            "var_name",
            "scope"
          ],
          "additionalProperties": false
        },
        {
          "title": "Generate",
          "description": "Creates new content based on a prompt, with optional refinement and workflow settings.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "generate",
              "default": "generate",
              "description": "Automatically set to 'generate' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "input": {
              "type": "object",
              "title": "Input",
              "description": "Provide the prompt to use for generation.",
              "properties": {
                "prompt": {
                  "type": "string",
                  "title": "Prompt",
                  "description": "The prompt text to use. Supports Jinja expressions like {{ variable_name }} to include context variables."
                }
              },
              "required": ["prompt"],
              "additionalProperties": false
            },
            "refiner": {
              "type": [
                "string",
                "null"
              ],
              "title": "Refiner",
              "enum": {{ ALL_REFINERS | default([null]) | tojson }},
              "description": "Optional: choose a post-process refinement model."
            },
            "workflow": {
              "type": [
                "string",
                "null"
              ],
              "title": "Workflow",
              "enum": {{ ALL_WORKFLOWS | default([null]) | tojson }},
              "description": "Optional: select a predefined generation workflow."
            },
            "publish": {
              "type": "boolean",
              "title": "Publish to Display",
              "description": "Whether to display the generated image on the output device. If false, the image is saved to the bucket but not shown.",
              "default": true
            },
            "output_var": {
              "type": "string",
              "title": "Output Variable",
              "description": "Optional: variable name to store the generated image path(s). If batch > 1, stores a list of paths."
            },
            "history_var": {
              "type": "string",
              "title": "History Variable",
              "description": "Optional: variable name where operation history will be stored. Each entry contains timestamp, prompt, and generation results."
            },
            "dontwait": { "$ref": "#/definitions/dontWaitProp" },
            "additionalProperties": {
              "type": "string",
              "title": "Additional Properties",
              "description": "Additional parameters to pass to the generation service. Format: 'param_name=value' (e.g. 'height=1024,width=1024,batch=4'). Values can be numbers, strings, booleans, etc."
            }
          },
          "required": [
            "action",
            "input"
          ],
          "additionalProperties": true
        },
        {
          "title": "Reason",
          "description": "Process input text and/or images using AI reasoning capabilities.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "reason",
              "default": "reason",
              "description": "Fixed to 'reason' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "text_input": {
              "type": "string",
              "title": "Text Input",
              "description": "Optional: The input text to process. Supports Jinja expressions like {{ variable_name }}."
            },
            "image_inputs": {
              "oneOf": [
                {
                  "type": "string",
                  "title": "Image Variable Name",
                  "description": "Name of a variable containing image path(s) to reason about."
                },
                {
                  "type": "array",
                  "title": "Image Paths Array",
                  "description": "Array of image paths to reason about (can be empty).",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "title": "Image Inputs",
              "description": "Either a variable name containing images, or an array of image paths (can be empty for no images)."
            },
            "reasoner": {
              "type": "string",
              "title": "Reasoner",
              "enum": {{ ALL_REASONERS | default(["default"]) | tojson }},
              "description": "The reasoning model to use for processing the inputs."
            },
            "output_vars": {
              "type": "array",
              "title": "Output Variables",
              "description": "Names of variables where the reasoning results will be stored.",
              "items": {
                "type": "string",
                "description": "Variable name"
              },
              "minItems": 1
            },
            "history_var": {
              "type": "string",
              "title": "History Variable",
              "description": "Optional: variable name where operation history will be stored. Each entry will contain timestamp, inputs, and outputs."
            },
            "dontwait": { "$ref": "#/definitions/dontWaitProp" }
          },
          "required": [
            "action",
            "reasoner",
            "output_vars"
          ],
          "additionalProperties": false
        },
        {
          "title": "Display",
          "description": "Show the next or a random picture in the bucket for this screen.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "display",
              "default": "display",
              "description": "Fixed to 'display' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "silent": {
              "type": "boolean",
              "title": "Silent",
              "description": "Suppress overlay prompt."
            },
            "show": {
              "type": "string",
              "title": "Display Mode",
              "enum": [
                "Next",
                "Random",
                "Blank",
                "Previous"
              ],
              "description": "Choose whether to display the next item in order, the previous item, pick one at random, or display a blank screen."
            }
          },
          "required": [
            "action",
            "show"
          ],
          "additionalProperties": false
        },
        {
          "title": "Select at Random",
          "description": "Select an item at random from a list.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "random_choice",
              "default": "random_choice",
              "description": "Fixed to 'random_choice' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "choices": {
              "type": "array",
              "title": "List of choices",
              "description": "Enter a list of items to choose from randomly.",
              "items": {
                "type": "string"
              }
            },
            "var": {
              "type": "string",
              "title": "Variable Name",
              "description": "The variable to store the randomly selected value in."
            }
          },
          "required": [
            "action",
            "choices",
            "var"
          ],
          "additionalProperties": false
        },
        {
          "title": "Device Media Sync",
          "description": "Synchronize media on the device, with optional non-blocking behavior.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "device-media-sync",
              "default": "device-media-sync",
              "description": "Fixed to 'device-media-sync' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "dontwait": { "$ref": "#/definitions/dontWaitProp" }
          },
          "required": [
            "action"
          ],
          "additionalProperties": false
        },
        {
          "title": "Device Wake",
          "description": "Wake the device from sleep or standby, with optional non-blocking behavior.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "device-wake",
              "default": "device-wake",
              "description": "Fixed to 'device-wake' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "dontwait": { "$ref": "#/definitions/dontWaitProp" }
          },
          "required": [
            "action"
          ],
          "additionalProperties": false
        },
        {
          "title": "Device Sleep",
          "description": "Put the device to sleep or standby, with optional non-blocking behavior.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "device-sleep",
              "default": "device-sleep",
              "description": "Fixed to 'device-sleep' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "dontwait": { "$ref": "#/definitions/dontWaitProp" }
          },
          "required": [
            "action"
          ],
          "additionalProperties": false
        },
        {
          "title": "Wait",
          "description": "Pause execution for a specified duration.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "wait",
              "default": "wait",
              "description": "Fixed to 'wait' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "duration": {
              "type": "string",
              "title": "Duration",
              "description": "Time to wait. Can be specified as minutes ('5'), or with units ('30s', '10m', '1h'). Wait can be interrupted by urgent events."
            }
          },
          "required": [
            "action",
            "duration"
          ],
          "additionalProperties": false
        },
        {
          "title": "Animate",
          "description": "Animate the image on the screen.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "animate",
              "default": "animate",
              "description": "Fixed to 'animate' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "prompt": {
              "type": "string",
              "title": "Prompt",
              "description": "Optional: provide a prompt for animation. Supports Jinja expressions like {{ variable_name }}."
            },
            "refiner": {
              "type": [
                "string",
                "null"
              ],
              "title": "Refiner",
              "enum": {{ ALL_REFINERS | default([null]) | tojson }},
              "description": "Optional: choose a post-process refinement model."
            },
            "history_var": {
              "type": "string",
              "title": "History Variable",
              "description": "Optional: variable name where operation history will be stored. Each entry contains timestamp, prompt, and animation details."
            },
            "dontwait": { "$ref": "#/definitions/dontWaitProp" }
          },
          "required": [
            "action"
          ],
          "additionalProperties": false
        },
        {
          "title": "Unload Schedule",
          "description": "Unload the current schedule and terminate.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "unload",
              "default": "unload",
              "description": "Fixed to 'unload' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            }
          },
          "required": [
            "action"
          ],
          "additionalProperties": false
        },
        {
          "title": "Terminate Schedule",
          "description": "Terminate the current schedule.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "terminate",
              "default": "terminate",
              "description": "Fixed to 'terminate' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "mode": {
              "type": "string",
              "enum": ["normal", "immediate", "block"],
              "default": "normal",
              "description": "Terminate mode: 'normal' executes final_instructions before terminating, 'immediate' terminates without final_instructions, 'block' exits current instruction block only."
            },
            "test": {
              "type": "string",
              "description": "Optional Jinja expression that must evaluate to true for the terminate to execute. If false or not provided, the terminate instruction is ignored."
            }
          },
          "required": [
            "action"
          ],
          "additionalProperties": false
        },
        {
          "title": "Log Message",
          "description": "Output a message to the logs for debugging purposes.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "log",
              "default": "log",
              "description": "Fixed to 'log' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "message": {
              "type": "string",
              "title": "Message",
              "description": "The message to output to logs. Supports Jinja expressions like {{ variable_name }}."
            }
          },
          "required": [
            "action",
            "message"
          ],
          "additionalProperties": false
        },
        {
          "title": "Throw Event",
          "description": "Throw an event for the scheduler to process.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "throw_event",
              "default": "throw_event",
              "uniforms": {
                "hidden": true
              },
              "description": "Identifies this instruction as an event-throwing operation."
            },
            "event": {
              "type": "string",
              "title": "Event Key",
              "description": "The event identifier. Must be a string matching A-Za-z0-9_.",
              "pattern": "^[A-Za-z0-9_]+$"
            },
            "display_name": {
              "type": "string",
              "title": "Display Name",
              "description": "Optional friendly name for the event for display in UI and logs."
            },
            "scope": {
              "type": "string",
              "title": "Event Scope",
              "enum": [
                "global"
                {% if DEST_GROUPS %}
                {% for group in DEST_GROUPS %}
                ,"{{ group }}"
                {% endfor %}
                {% endif %}
                {% for dest in ALL_DESTINATIONS | default([]) %}
                ,"{{ dest }}"
                {% endfor %}
              ],
              "default": "global",
              "description": "The scope of the event: a destination ID, group name, or 'global'."
            },
            "ttl": {
              "type": "string",
              "title": "Time to Live",
              "description": "How long this event remains active after being thrown, in the format '60s', '5m', '1h', etc.",
              "pattern": "^[0-9]+[smhd]$",
              "default": "60s"
            },
            "delay": {
              "type": "string",
              "title": "Delay",
              "description": "Optional delay before the event becomes active, in the format '10s', '1m', etc.",
              "pattern": "^[0-9]+[smhd]$"
            },
            "future_time": {
              "type": "string",
              "title": "Future Time",
              "description": "Optional specific time when the event should become active, in ISO-8601 format.",
              "format": "date-time"
            },
            "single_consumer": {
              "type": "boolean",
              "title": "Single Consumer",
              "description": "When true, the event is removed after the first trigger processes it. When false, it remains until TTL expires or is explicitly cleared.",
              "default": false
            },
            "payload": {
              "type": "object",
              "title": "Payload",
              "description": "Optional data to be carried with the event."
            }
          },
          "required": [
            "action",
            "event"
          ],
          "not": {
            "required": ["delay", "future_time"]
          },
          "additionalProperties": false
        },
        {
          "title": "Purge Bucket",
          "description": "Clean up files in the bucket, with options to keep favorites and filter by age.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "purge",
              "default": "purge",
              "description": "Fixed to 'purge' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "days": {
              "type": ["number", "null"],
              "title": "Age in Days",
              "description": "Optional: Only delete files older than this many days. If not specified, all files will be deleted based on favorites setting."
            },
            "include_favorites": {
              "type": "boolean",
              "title": "Include Favorites",
              "description": "Whether to remove favorite files as well. Default is false (keep favorites).",
              "default": false
            },
            "dontwait": { "$ref": "#/definitions/dontWaitProp" }
          },
          "required": [
            "action"
          ],
          "additionalProperties": false
        },
        {
          "title": "Publish Images",
          "description": "Publish images from variables to output devices.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "const": "publish",
              "default": "publish",
              "description": "Fixed to 'publish' to select this instruction type.",
              "uniforms": {
                "hidden": true
              }
            },
            "source": {
              "type": "string",
              "title": "Image Source",
              "description": "Image path(s) to publish. Supports Jinja expressions. Can be a single path or a list of paths."
            },
            "targets": {
              "type": "array",
              "title": "Target Destinations",
              "description": "List of destination IDs to publish to. Defaults to current destination if not specified.",
              "items": {
                "type": "string",
                "enum": {{ ALL_DESTINATIONS | default([]) | tojson }}
              }
            },
            "silent": {
              "type": "boolean",
              "title": "Silent Mode",
              "description": "If true, suppress overlay display when publishing.",
              "default": false
            }
          },
          "required": [
            "action",
            "source"
          ],
          "additionalProperties": false
        }
      ]
    },
    "time_schedule": {
      "type": "object",
      "title": "Time Schedule",
      "description": "Specify time of day (in local time) to begin",
      "properties": {
        "time": {
          "type": "string",
          "pattern": "^[0-9]{2}:[0-9]{2}$",
          "default": "00:01"
        },
        "repeat_schedule": {
          "type": "object",
          "title": "Repeat Schedule",
          "description": "If included, specify both the interval in minutes and the end time.",
          "properties": {
            "every": {
              "type": "string",
              "description": "In minutes."
            },
            "until": {
              "type": "string",
              "pattern": "^[0-9]{2}:[0-9]{2}$"
            }
          },
          "required": [
            "every"
          ],
          "additionalProperties": false
        },
        "trigger_actions": {
          "$ref": "#/definitions/instruction_array"
        }
      },
      "required": [
        "trigger_actions",
        "time"
      ],
      "additionalProperties": false
    },
    "time_schedule_array": {
      "type": "array",
      "title": "Schedules",
      "items": {
        "$ref": "#/definitions/time_schedule"
      },
      "minItems": 1
    },
    "day_of_week_trigger": {
      "type": "object",
      "title": "Day-of-Week Trigger",
      "uniforms": {
        "hidden": true
      },
      "description": "Which days of the week to run this.",
      "properties": {
        "type": {
          "const": "day_of_week"
        },
        "days": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ]
          },
          "default": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
          "description": "The days of the week when this trigger should fire. Defaults to all days if not specified.",
          "minItems": 1
        },
        "scheduled_actions": {
          "$ref": "#/definitions/time_schedule_array"
        }
      },
      "required": [
        "type",
        "days",
        "scheduled_actions"
      ],
      "additionalProperties": false
    },
    "date_trigger": {
      "title": "Date Trigger",
      "description": "Execute the nested schedules on a specific day and month (no year).",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "date",
          "default": "date",
          "description": "Fixed to 'date' to select this trigger type.",
          "uniforms": {
            "hidden": true
          }
        },
        "date": {
          "type": "string",
          "title": "Trigger Date",
          "description": "The day and month in D-MMM format (e.g. 5-Apr).",
          "pattern": "^(0?[1-9]|[12][0-9]|3[01])-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)$"
        },
        "scheduled_actions": {
          "title": "Schedules",
          "description": "One or more time-of-day entries (with optional repeats) to run on the trigger date.",
          "$ref": "#/definitions/time_schedule_array"
        }
      },
      "required": [
        "type",
        "date",
        "scheduled_actions"
      ],
      "additionalProperties": false
    },
    "event_trigger": {
      "type": "object",
      "title": "Event Trigger",
      "description": "Run a nested instruction sequence when a named external event occurs.",
      "properties": {
        "type": {
          "type": "string",
          "const": "event",
          "default": "event",
          "uniforms": {
            "hidden": true
          },
          "description": "Fixed to 'event' to select this trigger type."
        },
        "value": {
          "type": "string",
          "title": "Event Type",
          "description": "Select which external event will fire this trigger."
        },
        "trigger_actions": {
          "$ref": "#/definitions/instruction_array",
          "title": "Event Instructions",
          "description": "Steps to execute when the selected event occurs."
        }
      },
      "required": [
        "type",
        "value",
        "trigger_actions"
      ],
      "additionalProperties": false
    }
  },
  "additionalProperties": false
}